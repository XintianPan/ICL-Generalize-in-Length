#!/bin/bash
#SBATCH -p gpu
#SBATCH --qos=qos_zhuoran_yang 
#SBATCH --gres=gpu:h100:1


#SBATCH --job-name=in_context_learning
#SBATCH --output=gpu_%A_%a.txt
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --mem-per-cpu=10g
#SBATCH --time=48:00:00
#SBATCH --array=5

module load CUDA
module load cuDNN
# using your anaconda environment
module load miniconda
source activate in-context-learning

API_KEY=$(awk '/machine api.wandb.ai/{f=1} f==1 && /password/{print $2; exit}' ~/.netrc)

# Check if the API_KEY variable is not empty
if [ -z "$API_KEY" ]; then
  echo "Error: Could not extract API key from ~/.netrc"
  exit 1
fi

wandb login "$API_KEY"

# This is used for training, after training, it will automatically visualize QK circuit and evaluate model
# Training model needs to initialize dataset first, commands for generate dataset is provided as below

name_first="model_one-four_noattnout_onlyattnprev_"
name_last="d_2"
model_name="$name_first$SLURM_ARRAY_TASK_ID$name_last"

n_dim=$SLURM_ARRAY_TASK_ID

python src/train.py --config src/conf/linear_regression.yaml \
  --model.n_dims $n_dim \
  --training.resume_id $model_name \
  --wandb.name $model_name \
  --training.loss_only_zero False \
  --training.train_steps 1 \
  --model.weight_tying False

# If only want to evaluate model, use below command
# python src/get_eval.py --dir /home/xc425/project/models --runid stackxy_model_one-four_noise15d_qlen_nolyaernormandattnnorm_2

# If want to generate training dataset, please use
# python src/dataset_base.py

# If want to visualize QK circuit, use this
# python src/visualize_qk.py --dir /home/xc425/project/models --runid stackxy_model_one-four_noise15d_qlen_nolyaernormandattnnorm_2

